    package com.example.loginscreen;

    import android.app.DatePickerDialog;
    import android.content.Intent;
    import android.content.SharedPreferences;
    import android.os.Bundle;
    import android.os.Handler;
    import android.provider.Settings;
    import android.util.Log;
    import android.view.LayoutInflater;
    import android.view.View;
    import android.view.ViewGroup;
    import android.widget.ArrayAdapter;
    import android.widget.AutoCompleteTextView;
    import android.widget.Button;
    import android.widget.ImageView;
    import android.widget.TextView;
    import android.widget.Toast;

    import androidx.appcompat.app.AlertDialog;
    import androidx.work.OneTimeWorkRequest;
    import androidx.work.WorkManager;

    import androidx.appcompat.app.AppCompatActivity;
    import androidx.core.content.ContextCompat;

    import com.google.android.material.bottomnavigation.BottomNavigationView;
    import com.google.firebase.auth.FirebaseAuth;
    import com.google.firebase.firestore.CollectionReference;
    import com.google.firebase.firestore.DocumentSnapshot;
    import com.google.firebase.firestore.FirebaseFirestore;

    import java.text.SimpleDateFormat;
    import java.util.ArrayList;
    import java.util.Calendar;
    import java.util.HashMap;
    import java.util.Iterator;
    import java.util.List;
    import java.util.Locale;
    import java.util.Map;

    public class Plan extends AppCompatActivity {

        private ImageView objectImage;
        private TextView objectName, countdownTimer;
        private Button visitDateButton;
        private FirebaseFirestore firestore;
        private CollectionReference touristObjectsRef;
        private Calendar visitDateCalendar;

        private AutoCompleteTextView searchAutoComplete;
        private ArrayAdapter<String> adapter;
        private List<TouristObject> allObjects = new ArrayList<>();
        private Handler countdownHandler = new Handler();
        private Runnable countdownRunnable;

        @Override
        protected void onCreate(Bundle savedInstanceState) {
            super.onCreate(savedInstanceState);
            setContentView(R.layout.activity_plan);

            firestore = FirebaseFirestore.getInstance();
            touristObjectsRef = firestore.collection("TouristObjects");

            if (visitDateCalendar == null) {
                visitDateCalendar = Calendar.getInstance(); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è, –∞–∫–æ –µ null
            }

            searchAutoComplete = findViewById(R.id.searchAutoComplete);
            objectImage = findViewById(R.id.objectImage);
            objectName = findViewById(R.id.objectName);
            countdownTimer = findViewById(R.id.countdownTimer);
            visitDateButton = findViewById(R.id.visitDateButton);

            // Custom adapter —Å—ä—Å –∑–µ–ª–µ–Ω —Ç–µ–∫—Å—Ç
            adapter = new ArrayAdapter<String>(this, android.R.layout.simple_dropdown_item_1line, new ArrayList<>()) {
                @Override
                public View getView(int position, View convertView, ViewGroup parent) {
                    View view = super.getView(position, convertView, parent);
                    ((TextView) view).setTextColor(ContextCompat.getColor(getApplicationContext(), R.color.green));
                    return view;
                }
            };

            searchAutoComplete.setAdapter(adapter);

            loadTouristObjects();
            loadPlanFromFirestore();

            searchAutoComplete.setOnItemClickListener((parent, view, position, id) -> {
                String selectedName = adapter.getItem(position);
                for (TouristObject obj : allObjects) {
                    if (obj.getName().equals(selectedName)) {
                        displayTouristObject(obj);  // –ü–æ–∫–∞–∑–≤–∞–º–µ –æ–±–µ–∫—Ç–∞
                        addToPlan(obj); // –î–æ–±–∞–≤—è–º–µ –æ–±–µ–∫—Ç–∞ –≤ –ø–ª–∞–Ω
                        break;
                    }
                }
            });

            objectImage.setOnLongClickListener(v -> {
                showDeleteDialog();
                return true;  // –í—Ä—ä—â–∞–º–µ true, –∑–∞ –¥–∞ —Å–∏–≥–Ω–∞–ª–∏–∑–∏—Ä–∞–º–µ, —á–µ —Å—ä–±–∏—Ç–∏–µ—Ç–æ –µ –æ–±—Ä–∞–±–æ—Ç–µ–Ω–æ
            });

            visitDateButton.setOnClickListener(v -> openDatePickerDialog());

            BottomNavigationView bottomNavigationView = findViewById(R.id.bottomNavigationView);

            bottomNavigationView.setOnItemSelectedListener(item -> {
                int itemId = item.getItemId();

                if (itemId == R.id.nav_home) {
                    startActivity(new Intent(Plan.this, MainActivity.class));
                    finish();
                    return true;
                } else if (itemId == R.id.nav_notifications) {
                    startActivity(new Intent(Plan.this, Notifications.class));
                    return true;
                } else if (itemId == R.id.nav_logout) {
                    FirebaseAuth.getInstance().signOut();
                    startActivity(new Intent(Plan.this, LoginActivity.class));
                    finish();
                    return true;
                } else if (itemId == R.id.nav_profile) {
                    startActivity(new Intent(Plan.this, Profile.class));
                    return true;
                }

                return false;
            });

            // –ó–∞—Ä–µ–∂–¥–∞–º–µ –≤—Ä–µ–º–µ—Ç–æ –∑–∞ –ø–æ—Å–µ—â–µ–Ω–∏–µ –æ—Ç SharedPreferences
            SharedPreferences sharedPreferences = getSharedPreferences("TimerPreferences", MODE_PRIVATE);
            long savedVisitTime = sharedPreferences.getLong("visitTime", -1);

            if (savedVisitTime != -1) {
                visitDateCalendar.setTimeInMillis(savedVisitTime);  // –í—ä–∑—Å—Ç–∞–Ω–æ–≤—è–≤–∞–º–µ –≤—Ä–µ–º–µ—Ç–æ –æ—Ç SharedPreferences
                startCountdownTimer();  // –°—Ç–∞—Ä—Ç–∏—Ä–∞–º–µ —Ç–∞–π–º–µ—Ä–∞ —Å –≤—ä–∑—Å—Ç–∞–Ω–æ–≤–µ–Ω–æ—Ç–æ –≤—Ä–µ–º–µ
            }
        }


        private void showDeleteDialog() {
            // –°—ä–∑–¥–∞–≤–∞–º–µ –Ω–æ–≤ –¥–∏–∞–ª–æ–≥–æ–≤ –ø—Ä–æ–∑–æ—Ä–µ—Ü —Å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω–∏—è –∏–∑–≥–ª–µ–¥
            AlertDialog.Builder builder = new AlertDialog.Builder(Plan.this);
            LayoutInflater inflater = getLayoutInflater();
            View dialogView = inflater.inflate(R.layout.dialog_delete, null);
            builder.setView(dialogView);

            // –í–∑–µ–º–∞–º–µ –±—É—Ç–æ–Ω–∏—Ç–µ –æ—Ç –¥–∏–∞–ª–æ–≥–∞
            Button btnYes = dialogView.findViewById(R.id.btnYes);
            Button btnNo = dialogView.findViewById(R.id.btnNo);

            // –ò–∑–≤–µ–∂–¥–∞–º–µ –∑–∞–≥–ª–∞–≤–∏–µ –Ω–∞ –¥–∏–∞–ª–æ–≥–∞
            TextView titleTextView = dialogView.findViewById(R.id.titleTextView);
            titleTextView.setText("–ò—Å–∫–∞—Ç–µ –ª–∏ –¥–∞ –∏–∑—Ç—Ä–∏–µ—Ç–µ —Ç–æ–∑–∏ –æ–±–µ–∫—Ç –æ—Ç –ø–ª–∞–Ω–∞?");

            // –°—ä–∑–¥–∞–≤–∞–º–µ –¥–∏–∞–ª–æ–≥–∞
            AlertDialog alertDialog = builder.create();

            // –°–ª—É—à–∞—Ç–µ–ª–∏ –∑–∞ –±—É—Ç–æ–Ω–∏—Ç–µ
            btnYes.setOnClickListener(v -> {
                deleteTouristObjectFromPlan(); // –ò–∑—Ç—Ä–∏–≤–∞–º–µ –æ–±–µ–∫—Ç–∞
                alertDialog.dismiss();  // –ó–∞—Ç–≤–∞—Ä—è–º–µ –¥–∏–∞–ª–æ–≥–∞
            });

            btnNo.setOnClickListener(v -> {
                alertDialog.dismiss();  // –ü—Ä–æ—Å—Ç–æ –∑–∞—Ç–≤–∞—Ä—è–º–µ –¥–∏–∞–ª–æ–≥–∞, –±–µ–∑ –¥–∞ –ø—Ä–∞–≤–∏–º –Ω–∏—â–æ
            });

            // –ü–æ–∫–∞–∑–≤–∞–º–µ –¥–∏–∞–ª–æ–≥–∞
            alertDialog.show();
        }
        private void deleteTouristObjectFromPlan() {
            String objectNameToDelete = objectName.getText().toString();

            stopCountdownTimer();

            String userId = FirebaseAuth.getInstance().getCurrentUser().getUid();
            CollectionReference planRef = firestore.collection("users").document(userId).collection("plan");

            planRef.document(sanitizeForFirestoreId(objectNameToDelete)).delete()
                    .addOnSuccessListener(aVoid -> {
                        Toast.makeText(Plan.this, "–û–±–µ–∫—Ç—ä—Ç –±–µ—à–µ –∏–∑—Ç—Ä–∏—Ç –æ—Ç –ø–ª–∞–Ω–∞.", Toast.LENGTH_SHORT).show();

                        // üÜï –ò–∑—á–∏—Å—Ç–≤–∞–º–µ –¥–∞–Ω–Ω–∏—Ç–µ –æ—Ç SharedPreferences
                        clearPlanFromPreferences();

                        removeObjectFromLocalList(objectNameToDelete);
                        resetObjectView();
                    })
                    .addOnFailureListener(e -> {
                        Toast.makeText(Plan.this, "–ù–µ —É—Å–ø—è—Ö–º–µ –¥–∞ –∏–∑—Ç—Ä–∏–µ–º –æ–±–µ–∫—Ç–∞.", Toast.LENGTH_SHORT).show();
                    });
        }

        private void removeObjectFromLocalList(String objectNameToDelete) {
            Iterator<TouristObject> iterator = allObjects.iterator();
            while (iterator.hasNext()) {
                if (iterator.next().getName().equals(objectNameToDelete)) {
                    iterator.remove();
                    break;
                }
            }

            List<String> names = new ArrayList<>();
            for (TouristObject obj : allObjects) {
                names.add(obj.getName());
            }
            adapter.clear();
            adapter.addAll(names);
            adapter.notifyDataSetChanged();
        }



        private void resetObjectView() {
            // –ü—Ä–µ–º–∞—Ö–≤–∞–º–µ –≤—Å–∏—á–∫–∏ –¥–∞–Ω–Ω–∏ –æ—Ç –∏–∑–≥–ª–µ–¥–∞
            objectName.setText("");  // –ò–∑—á–∏—Å—Ç–≤–∞–º–µ –∏–º–µ—Ç–æ –Ω–∞ –æ–±–µ–∫—Ç–∞
            objectImage.setImageResource(R.drawable.default_image); // –í—Ä—ä—â–∞–º–µ –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—Ç–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∞
            countdownTimer.setText(""); // –ò–∑—á–∏—Å—Ç–≤–∞–º–µ —Ç–∞–π–º–µ—Ä–∞

            // –ù—É–ª–∏—Ä–∞–º–µ –∏ –≤—Ä–µ–º–µ—Ç–æ –Ω–∞ –ø–æ—Å–µ—â–µ–Ω–∏–µ
            visitDateCalendar = null;  // –ù—É–ª–∏—Ä–∞–º–µ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–∏—è –æ–±–µ–∫—Ç

            Log.d("PlanDebug", "resetObjectView() –∏–∑–≤–∏–∫–∞–Ω");
        }



        private void saveVisitTimeToPreferences(long visitTime) {
            SharedPreferences sharedPreferences = getSharedPreferences("TimerPreferences", MODE_PRIVATE);
            SharedPreferences.Editor editor = sharedPreferences.edit();
            editor.putLong("visitTime", visitTime);
            editor.apply();
        }


        private void startCountdownTimer() {
            if (visitDateCalendar == null) {
                countdownTimer.setText("–ù–µ –µ –∏–∑–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞ –∑–∞ –ø–æ—Å–µ—â–µ–Ω–∏–µ");
                return; // –ê–∫–æ –Ω—è–º–∞ –∏–∑–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞, –ø—Ä–æ—Å—Ç–æ –∏–∑–ª–∏–∑–∞–º–µ –æ—Ç –º–µ—Ç–æ–¥–∞
            }

            if (countdownRunnable != null) {
                countdownHandler.removeCallbacks(countdownRunnable);
            }

            countdownRunnable = new Runnable() {
                @Override
                public void run() {
                    long currentTime = System.currentTimeMillis();
                    long visitTime = visitDateCalendar.getTimeInMillis(); // –í–∑–µ–º–∞–º–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–∞–Ω–æ—Ç–æ –≤—Ä–µ–º–µ
                    long timeRemaining = visitTime - currentTime;

                    if (timeRemaining > 0) {
                        long days = timeRemaining / (1000 * 60 * 60 * 24);
                        long hours = (timeRemaining / (1000 * 60 * 60)) % 24;
                        long minutes = (timeRemaining / (1000 * 60)) % 60;
                        long seconds = (timeRemaining / 1000) % 60;

                        String time = String.format("%d–¥ %02d:%02d:%02d", days, hours, minutes, seconds);
                        countdownTimer.setText(time);

                        countdownHandler.postDelayed(this, 1000);
                    } else {
                        countdownTimer.setText("–í—Ä–µ–º–µ—Ç–æ –∏–∑—Ç–µ—á–µ!");
                    }
                }
            };

            countdownHandler.post(countdownRunnable);
        }

        private void loadTouristObjects() {
            touristObjectsRef.get().addOnCompleteListener(task -> {
                if (task.isSuccessful() && task.getResult() != null) {
                    List<String> names = new ArrayList<>();
                    allObjects.clear();
                    for (DocumentSnapshot document : task.getResult()) {
                        TouristObject obj = document.toObject(TouristObject.class);
                        if (obj != null) {
                            allObjects.add(obj);
                            names.add(obj.getName());
                        }
                    }
                    if (allObjects.isEmpty()) {
                        Toast.makeText(Plan.this, "–ù—è–º–∞ –Ω–∞–ª–∏—á–Ω–∏ —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏ –æ–±–µ–∫—Ç–∏.", Toast.LENGTH_SHORT).show();
                    }
                    adapter.clear();
                    adapter.addAll(names);
                    adapter.notifyDataSetChanged();
                } else {
                    Toast.makeText(Plan.this, "–ù–µ —É—Å–ø—è—Ö–º–µ –¥–∞ –∑–∞—Ä–µ–¥–∏–º –¥–∞–Ω–Ω–∏ –∑–∞ –æ–±–µ–∫—Ç–∏—Ç–µ.", Toast.LENGTH_SHORT).show();
                }
            });
        }

        private void displayTouristObject(TouristObject obj) {
            objectName.setText(obj.getName());

            if (obj.getImage() != null && !obj.getImage().isEmpty()) {
                int imageResId = getResources().getIdentifier(obj.getImage(), "drawable", getPackageName());

                if (imageResId != 0) {
                    objectImage.setImageResource(imageResId);
                } else {
                    objectImage.setImageResource(R.drawable.default_image); // —Ä–µ–∑–µ—Ä–≤–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                }
            } else {
                objectImage.setImageResource(R.drawable.default_image); // –∞–∫–æ –Ω—è–º–∞ –ø–æ–¥–∞–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            }


            startCountdownTimer();
        }

        private void openDatePickerDialog() {
            if (visitDateCalendar == null) {
                visitDateCalendar = Calendar.getInstance(); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            }
            Calendar calendar = Calendar.getInstance();
            DatePickerDialog datePickerDialog = new DatePickerDialog(this,
                    R.style.CustomDatePickerDialog, // –ó–∞–¥–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω–∏—è —Å—Ç–∏–ª —Ç—É–∫
                    (view, year, monthOfYear, dayOfMonth) -> {
                        visitDateCalendar = Calendar.getInstance();
                        visitDateCalendar.set(year, monthOfYear, dayOfMonth);
                        String formattedDate = new SimpleDateFormat("dd/MM/yyyy", Locale.getDefault()).format(visitDateCalendar.getTime());
                        visitDateButton.setText("–ü–æ—Å–µ—â–µ–Ω–∏–µ –Ω–∞: " + formattedDate);

                        // –ó–∞–ø–∏—Å–≤–∞–º–µ –≤—Ä–µ–º–µ—Ç–æ –∑–∞ –ø–æ—Å–µ—â–µ–Ω–∏–µ –≤ SharedPreferences
                        saveVisitTimeToPreferences(visitDateCalendar.getTimeInMillis());
                        updateVisitTimeInFirestore(objectName.getText().toString(), visitDateCalendar.getTimeInMillis());


                        startCountdownTimer();
                    },
                    calendar.get(Calendar.YEAR),
                    calendar.get(Calendar.MONTH),
                    calendar.get(Calendar.DAY_OF_MONTH));
            datePickerDialog.show();
        }

        private void addToPlan(TouristObject obj) {
            String userId = FirebaseAuth.getInstance().getCurrentUser().getUid();
            CollectionReference planRef = firestore.collection("users").document(userId).collection("plan");

            // –í–∑–µ–º–∞–º–µ —Ç–µ–∫—É—â–æ—Ç–æ –≤—Ä–µ–º–µ –∑–∞ –ø–æ—Å–µ—â–µ–Ω–∏–µ
            if (visitDateCalendar == null) {
                visitDateCalendar = Calendar.getInstance();
            }

            long visitTime = visitDateCalendar.getTimeInMillis();

            // –°—ä–∑–¥–∞–≤–∞–º–µ –æ–±–µ–∫—Ç–∞ —Å –¥–∞–Ω–Ω–∏
            Map<String, Object> planData = new HashMap<>();
            planData.put("name", obj.getName());
            planData.put("image", obj.getImage());
            planData.put("visitTime", visitTime);

            // üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∏–º–µ –∑–∞ Firestore ID
            String safeName = sanitizeForFirestoreId(obj.getName());
            Log.d("FirestoreDebug", "–î–æ–±–∞–≤—è–º –≤ Plan —Å ID: " + safeName); // –ø–æ –∏–∑–±–æ—Ä

            // –ó–∞–ø–∏—Å–≤–∞–º–µ –æ–±–µ–∫—Ç–∞ –≤ Firestore
            planRef.document(safeName)
                    .set(planData)
                    .addOnSuccessListener(aVoid -> {
                        Toast.makeText(Plan.this, "–û–±–µ–∫—Ç—ä—Ç –µ –¥–æ–±–∞–≤–µ–Ω –≤ –ø–ª–∞–Ω–∞.", Toast.LENGTH_SHORT).show();
                        saveVisitTimeToPreferences(visitTime);
                        saveLastPlannedObjectName(obj.getName()); // üÜï// ‚è±Ô∏è –∑–∞–ø–∞–∑–≤–∞–º–µ –≤—Ä–µ–º–µ—Ç–æ
                        startCountdownTimer(); // —Å—Ç–∞—Ä—Ç–∏—Ä–∞–º–µ —Ç–∞–π–º–µ—Ä
                    })
                    .addOnFailureListener(e -> {
                        Toast.makeText(Plan.this, "–ù–µ —É—Å–ø—è—Ö–º–µ –¥–∞ –¥–æ–±–∞–≤–∏–º –æ–±–µ–∫—Ç–∞ –≤ –ø–ª–∞–Ω–∞.", Toast.LENGTH_SHORT).show();
                    });
        }

        private void saveLastPlannedObjectName(String name) {
            SharedPreferences prefs = getSharedPreferences("TimerPreferences", MODE_PRIVATE);
            prefs.edit().putString("lastPlannedObject", name).apply();
        }


        private void loadPlanFromFirestore() {
            String targetName = getIntent().getStringExtra("objectName");
            long passedVisitTime = getIntent().getLongExtra("visitTime", -1);


            if (targetName == null) {
                SharedPreferences prefs = getSharedPreferences("TimerPreferences", MODE_PRIVATE);
                targetName = prefs.getString("lastPlannedObject", null);
            }

            String userId = FirebaseAuth.getInstance().getCurrentUser().getUid();
            CollectionReference planRef = firestore.collection("users").document(userId).collection("plan");

            if (targetName != null) {
                String safeTargetName = sanitizeForFirestoreId(targetName); // ‚úÖ –¥–æ–±–∞–≤–µ–Ω–æ!

                planRef.document(safeTargetName).get().addOnSuccessListener(document -> {
                    if (document.exists()) {
                        TouristObject obj = document.toObject(TouristObject.class);
                        if (obj != null) {
                            obj.setName(document.getId());

                            if (passedVisitTime > 0) {
                                visitDateCalendar = Calendar.getInstance();
                                visitDateCalendar.setTimeInMillis(passedVisitTime);
                                saveVisitTimeToPreferences(passedVisitTime);
                            } else if (obj.getVisitTime() > 0) {
                                visitDateCalendar = Calendar.getInstance();
                                visitDateCalendar.setTimeInMillis(obj.getVisitTime());
                                saveVisitTimeToPreferences(obj.getVisitTime());
                            }

                            displayTouristObject(obj);
                        }
                    } else {
                        Toast.makeText(this, "–û–±–µ–∫—Ç—ä—Ç –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω –≤ Plan.", Toast.LENGTH_SHORT).show();
                    }
                }).addOnFailureListener(e -> {
                    Toast.makeText(this, "–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ Plan –æ–±–µ–∫—Ç.", Toast.LENGTH_SHORT).show();
                });
            } else {
                planRef.get().addOnSuccessListener(query -> {
                    for (DocumentSnapshot document : query) {
                        TouristObject obj = document.toObject(TouristObject.class);
                        if (obj != null) {
                            obj.setName(document.getId());

                            if (obj.getVisitTime() > 0) {
                                visitDateCalendar = Calendar.getInstance();
                                visitDateCalendar.setTimeInMillis(obj.getVisitTime());
                                saveVisitTimeToPreferences(obj.getVisitTime());
                            }

                            displayTouristObject(obj);
                            return;
                        }
                    }
                }).addOnFailureListener(e ->
                        Toast.makeText(this, "–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ Plan.", Toast.LENGTH_SHORT).show()
                );
            }
        }



        @Override
        protected void onPause() {
            super.onPause();
            if (countdownRunnable != null) {
                countdownHandler.removeCallbacks(countdownRunnable);  // –°–ø–∏—Ä–∞–Ω–µ –Ω–∞ —Ç–∞–π–º–µ—Ä–∞ –ø—Ä–∏ –Ω–∞–ø—É—Å–∫–∞–Ω–µ –Ω–∞ –µ–∫—Ä–∞–Ω–∞
            }
        }

        @Override
        protected void onResume() {
            super.onResume();
            // –ü—Ä–æ–¥—ä–ª–∂–∞–≤–∞–º–µ —Ç–∞–π–º–µ—Ä–∞, –∞–∫–æ –∏–º–∞ –∑–∞–¥–∞–¥–µ–Ω–∞ –¥–∞—Ç–∞ –Ω–∞ –ø–æ—Å–µ—â–µ–Ω–∏–µ
            if (visitDateCalendar != null) {
                startCountdownTimer();  // –°—Ç–∞—Ä—Ç–∏—Ä–∞–º–µ –æ—Ç–Ω–æ–≤–æ —Ç–∞–π–º–µ—Ä–∞
            }
        }

        @Override
        protected void onDestroy() {
            super.onDestroy();
            // –°–ø–∏—Ä–∞–º–µ —Ç–∞–π–º–µ—Ä–∞, –∞–∫–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—Ç–∞ —Å–µ —É–Ω–∏—â–æ–∂–∞–≤–∞
            if (countdownRunnable != null) {
                countdownHandler.removeCallbacks(countdownRunnable);  // –°–ø–∏—Ä–∞–º–µ —Ç–∞–π–º–µ—Ä–∞
                countdownRunnable = null;  // –ò–∑—á–∏—Å—Ç–≤–∞–º–µ runnable
            }
        }

        private void stopCountdownTimer() {
            if (countdownRunnable != null) {
                countdownHandler.removeCallbacks(countdownRunnable);  // –ü—Ä–µ–º–∞—Ö–≤–∞–º–µ —Ç–µ–∫—É—â–∏—è Runnable
                countdownRunnable = null;  // –ò–∑—á–∏—Å—Ç–≤–∞–º–µ runnable
                countdownTimer.setText(""); // –ò–∑—á–∏—Å—Ç–≤–∞–º–µ —Ç–∞–π–º–µ—Ä–∞ –æ—Ç –µ–∫—Ä–∞–Ω–∞
            }
        }

        private String sanitizeForFirestoreId(String name) {
            return name.replaceAll("[.#\\$\\[\\]/]", "_");
        }

        private void clearPlanFromPreferences() {
            SharedPreferences prefs = getSharedPreferences("TimerPreferences", MODE_PRIVATE);
            prefs.edit()
                    .remove("visitTime")
                    .remove("lastPlannedObject")
                    .apply();
        }

        private void updateVisitTimeInFirestore(String objectName, long visitTime) {
            String userId = FirebaseAuth.getInstance().getCurrentUser().getUid();
            String safeName = sanitizeForFirestoreId(objectName);

            firestore.collection("users")
                    .document(userId)
                    .collection("plan")
                    .document(safeName)
                    .update("visitTime", visitTime)
                    .addOnSuccessListener(aVoid -> Log.d("Plan", "visitTime updated"))
                    .addOnFailureListener(e -> Log.e("Plan", "–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ visitTime: " + e.getMessage()));
        }










    }
